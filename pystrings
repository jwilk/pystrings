#!/usr/bin/env python
# encoding=UTF-8

# Copyright © 2016 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function

import argparse
import locale
import signal
import sys

import lib

def process_file(options, path):
    stdout = sys.stdout
    if str is not bytes:
        stdout = stdout.buffer
    for s in lib.extract_strings(path):
        if isinstance(s, bytes):
            b = s
        else:
            b = s.encode(options.encoding, 'replace')
        stdout.write(b)
        stdout.write(b'\n')

def main():
    ap = argparse.ArgumentParser()
    default_encoding = sys.stdout.encoding or locale.getpreferredencoding()
    ap.add_argument('-e', '--encoding', default=default_encoding)
    ap.add_argument('--traceback', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('paths', metavar='PATH', nargs='+')
    options = ap.parse_args()
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    rc = 0
    for path in options.paths:
        try:
            process_file(options, path)
        except SyntaxError as exc:
            if options.traceback:
                raise
            msg = '{prog}: {path}: {exc}'.format(prog=ap.prog, path=path, exc=exc)
            print(msg, file=sys.stderr)
            rc = 1
    sys.exit(rc)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
